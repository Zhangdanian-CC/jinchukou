{"remainingRequest":"D:\\Awork\\jinchukou\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Awork\\jinchukou\\src\\components\\zhiliang\\zhiliangcenterone.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Awork\\jinchukou\\src\\components\\zhiliang\\zhiliangcenterone.vue","mtime":1602726610556},{"path":"D:\\Awork\\jinchukou\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Awork\\jinchukou\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Awork\\jinchukou\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Awork\\jinchukou\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n\r\nexport default {\r\n  name: \"\",\r\n  props: [\"chartData\"],\r\n  mounted() {\r\n    this.initLineChart(this.chartData);\r\n  },\r\n  data() {\r\n    return {};\r\n  },\r\n  computed: {},\r\n  methods: {\r\n    initLineChart(data) {\r\n      //   if (!data || JSON.stringify(data) == '\"{}\"') return;\r\n      let e = document.body.clientWidth;\r\n      let myCharts = this.$echarts.init(\r\n        document.getElementById(\"zhiliangcenterone\")\r\n      );\r\n      myCharts.setOption({\r\n        tooltip: {\r\n          //提示框组件\r\n          trigger: \"axis\",\r\n          axisPointer: {\r\n            type: \"shadow\",\r\n            label: {\r\n              backgroundColor: \"#6a7985\",\r\n            },\r\n          },\r\n          backgroundColor: \"rgba(70,130,180,0.8)\",\r\n          borderColor: \"rgba(47,79,79,1)\",\r\n          borderWidth: (e / 1600) * 1,\r\n          padding: [(e / 1600) * 6, (e / 1600) * 12],\r\n          textStyle: {\r\n            color: \"rgba(255, 255, 255, 0.8)\",\r\n            fontStyle: \"normal\",\r\n            fontFamily: \"微软雅黑\",\r\n            fontSize: (e / 1600) * 10,\r\n            lineHeight:(e / 1600) * 18,\r\n          },\r\n        },\r\n        grid: {\r\n          // 柱状图位置\r\n          x: (e / 1600) * 50,\r\n          y: (e / 1600) * 50,\r\n          x2: (e / 1600) * 30,\r\n          y2: (e / 1600) * 50,\r\n        },\r\n        legend: {\r\n          // data: [\"正常\"],\r\n          show: true,\r\n          top: \"4%\",\r\n          right: \"8%\",\r\n          itemWidth: (e / 1600) * 8,\r\n          itemHeight: (e / 1600) * 12,\r\n          // icon: \"roundRect\",\r\n          color: \"#59ecff\",\r\n          textStyle: {\r\n            color: \"#b3bfca\",\r\n          },\r\n        },\r\n        xAxis: {\r\n          data: [\r\n            \"林业\",\r\n            \"农业\",\r\n            \"纺织\",\r\n            \"批发\",\r\n            \"零售\",\r\n            \"金融\",\r\n            \"保险\",\r\n            \"房屋建筑\",\r\n            \"家具制造\",\r\n            \"食品\",\r\n          ],\r\n          axisLabel: {\r\n            interval: 0, //控制坐标是否全部显示\r\n            inside: false,\r\n            textStyle: {\r\n              color: \"#ccd7d7\",\r\n              fontSize: (e / 1600) * 12,\r\n            },\r\n            margin: (e / 1600) * 10,\r\n            formatter: function (params) {\r\n              var newParamsName = \"\"; // 最终拼接成的字符串\r\n              var paramsNameNumber = params.length; // 实际标签的个数\r\n              var provideNumber = 2; // 每行能显示的字的个数\r\n              var rowNumber = Math.ceil(paramsNameNumber / provideNumber); // 换行的话，需要显示几行，向上取整\r\n              /**\r\n               * 判断标签的个数是否大于规定的个数， 如果大于，则进行换行处理 如果不大于，即等于或小于，就返回原标签\r\n               */\r\n              // 条件等同于rowNumber>1\r\n              if (paramsNameNumber > provideNumber) {\r\n                /** 循环每一行,p表示行 */\r\n                for (var p = 0; p < rowNumber; p++) {\r\n                  var tempStr = \"\"; // 表示每一次截取的字符串\r\n                  var start = p * provideNumber; // 开始截取的位置\r\n                  var end = start + provideNumber; // 结束截取的位置\r\n                  // 此处特殊处理最后一行的索引值\r\n                  if (p == rowNumber - 1) {\r\n                    // 最后一次不换行\r\n                    tempStr = params.substring(start, paramsNameNumber);\r\n                  } else {\r\n                    // 每一次拼接字符串并换行\r\n                    tempStr = params.substring(start, end) + \"\\n\";\r\n                  }\r\n                  newParamsName += tempStr; // 最终拼成的字符串\r\n                }\r\n              } else {\r\n                // 将旧标签的值赋给新标签\r\n                newParamsName = params;\r\n              }\r\n              //将最终的字符串返回\r\n              return newParamsName;\r\n            },\r\n          },\r\n          axisTick: {\r\n            show: false,\r\n          },\r\n          axisLine: {\r\n            show: true,\r\n            lineStyle: {\r\n              type: \"solid\",\r\n              color: \"#83aac4\",\r\n            },\r\n          },\r\n          z: 10,\r\n        },\r\n        yAxis: {\r\n          splitNumber: 4,\r\n          min: 0,\r\n          max: 80,\r\n          axisLine: {\r\n            show: false,\r\n          },\r\n          axisTick: {\r\n            show: false,\r\n          },\r\n          axisLabel: {\r\n            textStyle: {\r\n              color: \"#999\",\r\n            },\r\n          },\r\n          splitLine: {\r\n            lineStyle: {\r\n              type: \"dashed\",\r\n              color: \"#808079\",\r\n            },\r\n          },\r\n        },\r\n\r\n        series: [\r\n          {\r\n            name: \"正常\",\r\n            type: \"bar\",\r\n            stack: \"aa\",\r\n            barWidth: (e / 1600) * 18,\r\n            itemStyle: {\r\n              color: \"#0975d9\",\r\n            },\r\n            // itemStyle: {\r\n            //   color: new this.$echarts.graphic.LinearGradient(0, 0, 0, 1, [\r\n            //     { offset: 0, color: \"#20F2FF\" },\r\n            //     { offset: 1, color: \"#003FBE\" },\r\n            //   ]),\r\n            // },\r\n            data: [40, 30, 26, 20, 22, 20, 22, 16, 15, 13],\r\n          },\r\n          {\r\n            name: \"不良\",\r\n            type: \"bar\",\r\n            stack: \"aa\",\r\n            barWidth: (e / 1600) * 18,\r\n            itemStyle: {\r\n              color: \"#78e7ff\",\r\n            },\r\n            // itemStyle: {\r\n            //   color: new this.$echarts.graphic.LinearGradient(0, 0, 0, 1, [\r\n            //     { offset: 0, color: \"#20F2FF\" },\r\n            //     { offset: 1, color: \"#003FBE\" },\r\n            //   ]),\r\n            // },\r\n            data: [13, 14, 10, 17, 10, 8, 4, 9, 10, 5],\r\n          },\r\n          {\r\n            name: \"关注\",\r\n            type: \"bar\",\r\n            stack: \"aa\",\r\n            barWidth: (e / 1600) * 18,\r\n            itemStyle: {\r\n              color: \"#b4a8ff\",\r\n            },\r\n            // itemStyle: {\r\n            //   color: new this.$echarts.graphic.LinearGradient(0, 0, 0, 1, [\r\n            //     { offset: 0, color: \"#20F2FF\" },\r\n            //     { offset: 1, color: \"#003FBE\" },\r\n            //   ]),\r\n            // },\r\n            data: [20, 24, 20, 12, 13, 16, 15, 14, 13, 12],\r\n          },\r\n        ],\r\n      });\r\n      //根据窗口的大小变动图表 \r\n      window.onresize = function () {\r\n        myCharts.resize();\r\n        //myChart1.resize();    //若有多个图表变动，可多写\r\n      };\r\n    },\r\n  },\r\n  components: {},\r\n};\r\n",{"version":3,"sources":["zhiliangcenterone.vue"],"names":[],"mappingsfile":"zhiliangcenterone.vue","sourceRoot":"src/components/zhiliang","sourcesContent":["<template>\r\n  <div class=\"zhiliangcenterone\" id=\"zhiliangcenterone\"></div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"\",\r\n  props: [\"chartData\"],\r\n  mounted() {\r\n    this.initLineChart(this.chartData);\r\n  },\r\n  data() {\r\n    return {};\r\n  },\r\n  computed: {},\r\n  methods: {\r\n    initLineChart(data) {\r\n      //   if (!data || JSON.stringify(data) == '\"{}\"') return;\r\n      let e = document.body.clientWidth;\r\n      let myCharts = this.$echarts.init(\r\n        document.getElementById(\"zhiliangcenterone\")\r\n      );\r\n      myCharts.setOption({\r\n        tooltip: {\r\n          //提示框组件\r\n          trigger: \"axis\",\r\n          axisPointer: {\r\n            type: \"shadow\",\r\n            label: {\r\n              backgroundColor: \"#6a7985\",\r\n            },\r\n          },\r\n          backgroundColor: \"rgba(70,130,180,0.8)\",\r\n          borderColor: \"rgba(47,79,79,1)\",\r\n          borderWidth: (e / 1600) * 1,\r\n          padding: [(e / 1600) * 6, (e / 1600) * 12],\r\n          textStyle: {\r\n            color: \"rgba(255, 255, 255, 0.8)\",\r\n            fontStyle: \"normal\",\r\n            fontFamily: \"微软雅黑\",\r\n            fontSize: (e / 1600) * 10,\r\n            lineHeight:(e / 1600) * 18,\r\n          },\r\n        },\r\n        grid: {\r\n          // 柱状图位置\r\n          x: (e / 1600) * 50,\r\n          y: (e / 1600) * 50,\r\n          x2: (e / 1600) * 30,\r\n          y2: (e / 1600) * 50,\r\n        },\r\n        legend: {\r\n          // data: [\"正常\"],\r\n          show: true,\r\n          top: \"4%\",\r\n          right: \"8%\",\r\n          itemWidth: (e / 1600) * 8,\r\n          itemHeight: (e / 1600) * 12,\r\n          // icon: \"roundRect\",\r\n          color: \"#59ecff\",\r\n          textStyle: {\r\n            color: \"#b3bfca\",\r\n          },\r\n        },\r\n        xAxis: {\r\n          data: [\r\n            \"林业\",\r\n            \"农业\",\r\n            \"纺织\",\r\n            \"批发\",\r\n            \"零售\",\r\n            \"金融\",\r\n            \"保险\",\r\n            \"房屋建筑\",\r\n            \"家具制造\",\r\n            \"食品\",\r\n          ],\r\n          axisLabel: {\r\n            interval: 0, //控制坐标是否全部显示\r\n            inside: false,\r\n            textStyle: {\r\n              color: \"#ccd7d7\",\r\n              fontSize: (e / 1600) * 12,\r\n            },\r\n            margin: (e / 1600) * 10,\r\n            formatter: function (params) {\r\n              var newParamsName = \"\"; // 最终拼接成的字符串\r\n              var paramsNameNumber = params.length; // 实际标签的个数\r\n              var provideNumber = 2; // 每行能显示的字的个数\r\n              var rowNumber = Math.ceil(paramsNameNumber / provideNumber); // 换行的话，需要显示几行，向上取整\r\n              /**\r\n               * 判断标签的个数是否大于规定的个数， 如果大于，则进行换行处理 如果不大于，即等于或小于，就返回原标签\r\n               */\r\n              // 条件等同于rowNumber>1\r\n              if (paramsNameNumber > provideNumber) {\r\n                /** 循环每一行,p表示行 */\r\n                for (var p = 0; p < rowNumber; p++) {\r\n                  var tempStr = \"\"; // 表示每一次截取的字符串\r\n                  var start = p * provideNumber; // 开始截取的位置\r\n                  var end = start + provideNumber; // 结束截取的位置\r\n                  // 此处特殊处理最后一行的索引值\r\n                  if (p == rowNumber - 1) {\r\n                    // 最后一次不换行\r\n                    tempStr = params.substring(start, paramsNameNumber);\r\n                  } else {\r\n                    // 每一次拼接字符串并换行\r\n                    tempStr = params.substring(start, end) + \"\\n\";\r\n                  }\r\n                  newParamsName += tempStr; // 最终拼成的字符串\r\n                }\r\n              } else {\r\n                // 将旧标签的值赋给新标签\r\n                newParamsName = params;\r\n              }\r\n              //将最终的字符串返回\r\n              return newParamsName;\r\n            },\r\n          },\r\n          axisTick: {\r\n            show: false,\r\n          },\r\n          axisLine: {\r\n            show: true,\r\n            lineStyle: {\r\n              type: \"solid\",\r\n              color: \"#83aac4\",\r\n            },\r\n          },\r\n          z: 10,\r\n        },\r\n        yAxis: {\r\n          splitNumber: 4,\r\n          min: 0,\r\n          max: 80,\r\n          axisLine: {\r\n            show: false,\r\n          },\r\n          axisTick: {\r\n            show: false,\r\n          },\r\n          axisLabel: {\r\n            textStyle: {\r\n              color: \"#999\",\r\n            },\r\n          },\r\n          splitLine: {\r\n            lineStyle: {\r\n              type: \"dashed\",\r\n              color: \"#808079\",\r\n            },\r\n          },\r\n        },\r\n\r\n        series: [\r\n          {\r\n            name: \"正常\",\r\n            type: \"bar\",\r\n            stack: \"aa\",\r\n            barWidth: (e / 1600) * 18,\r\n            itemStyle: {\r\n              color: \"#0975d9\",\r\n            },\r\n            // itemStyle: {\r\n            //   color: new this.$echarts.graphic.LinearGradient(0, 0, 0, 1, [\r\n            //     { offset: 0, color: \"#20F2FF\" },\r\n            //     { offset: 1, color: \"#003FBE\" },\r\n            //   ]),\r\n            // },\r\n            data: [40, 30, 26, 20, 22, 20, 22, 16, 15, 13],\r\n          },\r\n          {\r\n            name: \"不良\",\r\n            type: \"bar\",\r\n            stack: \"aa\",\r\n            barWidth: (e / 1600) * 18,\r\n            itemStyle: {\r\n              color: \"#78e7ff\",\r\n            },\r\n            // itemStyle: {\r\n            //   color: new this.$echarts.graphic.LinearGradient(0, 0, 0, 1, [\r\n            //     { offset: 0, color: \"#20F2FF\" },\r\n            //     { offset: 1, color: \"#003FBE\" },\r\n            //   ]),\r\n            // },\r\n            data: [13, 14, 10, 17, 10, 8, 4, 9, 10, 5],\r\n          },\r\n          {\r\n            name: \"关注\",\r\n            type: \"bar\",\r\n            stack: \"aa\",\r\n            barWidth: (e / 1600) * 18,\r\n            itemStyle: {\r\n              color: \"#b4a8ff\",\r\n            },\r\n            // itemStyle: {\r\n            //   color: new this.$echarts.graphic.LinearGradient(0, 0, 0, 1, [\r\n            //     { offset: 0, color: \"#20F2FF\" },\r\n            //     { offset: 1, color: \"#003FBE\" },\r\n            //   ]),\r\n            // },\r\n            data: [20, 24, 20, 12, 13, 16, 15, 14, 13, 12],\r\n          },\r\n        ],\r\n      });\r\n      //根据窗口的大小变动图表 \r\n      window.onresize = function () {\r\n        myCharts.resize();\r\n        //myChart1.resize();    //若有多个图表变动，可多写\r\n      };\r\n    },\r\n  },\r\n  components: {},\r\n};\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.zhiliangcenterone {\r\n  width: 35.625vw;\r\n  height: 22.292vw;\r\n}\r\n</style>\r\n"]}]}