{"remainingRequest":"D:\\Work\\jinchukou\\node_modules\\babel-loader\\lib\\index.js!D:\\Work\\jinchukou\\src\\api\\filter.js","dependencies":[{"path":"D:\\Work\\jinchukou\\src\\api\\filter.js","mtime":1598403795000},{"path":"D:\\Work\\jinchukou\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Work\\jinchukou\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport _typeof from \"D:/Work/jinchukou/node_modules/@babel/runtime/helpers/esm/typeof\";\n\nvar isNullOrEmpty = function isNullOrEmpty(val) {\n  if (val == null || val == \"\" || _typeof(val) == undefined) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nvar numFormat = function numFormat(params) {\n  if (params === null || params === undefined) {\n    return null;\n  } else if (isNaN(params)) {\n    return 'NaN';\n  } else {\n    var num = params.toString();\n\n    if (/^-?\\d+\\.?\\d+$/.test(num)) {\n      if (/^-?\\d+$/.test(num)) {\n        num = num.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n      } else {\n        var numarray = num.split('.');\n        var numbefore = numarray[0].replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n        num = numbefore + '.' + numarray[1];\n      }\n    }\n\n    return num;\n  }\n};\n\nvar toBase64 = function toBase64(str) {\n  return btoa(str);\n};\n\nvar sortByValue = function sortByValue(arr, value) {\n  arr.sort(function (x, y) {\n    var m = value && x[value] || x,\n        n = value && y[value] || y;\n    return n - m;\n  });\n  return arr;\n};\n\nexport { isNullOrEmpty, numFormat, toBase64, sortByValue };",{"version":3,"sources":["D:/Work/jinchukou/src/api/filter.js"],"names":["isNullOrEmpty","val","undefined","numFormat","params","isNaN","num","toString","test","replace","numarray","split","numbefore","toBase64","str","btoa","sortByValue","arr","value","sort","x","y","m","n"],"mappings":";;;;;;AAAA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAASC,GAAT,EAAc;AAChC,MAAIA,GAAG,IAAI,IAAP,IAAeA,GAAG,IAAI,EAAtB,IAA4B,QAAOA,GAAP,KAAeC,SAA/C,EAA0D;AACtD,WAAO,IAAP;AACH,GAFD,MAEO;AACH,WAAO,KAAP;AACH;AACJ,CAND;;AAOA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAUC,MAAV,EAAkB;AAChC,MAAIA,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAKF,SAAlC,EAA6C;AACzC,WAAO,IAAP;AACD,GAFH,MAES,IAAIG,KAAK,CAACD,MAAD,CAAT,EAAmB;AACxB,WAAO,KAAP;AACD,GAFM,MAEA;AACL,QAAIE,GAAG,GAAGF,MAAM,CAACG,QAAP,EAAV;;AACA,QAAI,gBAAgBC,IAAhB,CAAqBF,GAArB,CAAJ,EAA+B;AAC7B,UAAI,UAAUE,IAAV,CAAeF,GAAf,CAAJ,EAAyB;AACvBA,QAAAA,GAAG,GAAGA,GAAG,CAACG,OAAJ,CAAY,yBAAZ,EAAuC,KAAvC,CAAN;AACD,OAFD,MAEO;AACL,YAAIC,QAAQ,GAAGJ,GAAG,CAACK,KAAJ,CAAU,GAAV,CAAf;AACA,YAAIC,SAAS,GAAGF,QAAQ,CAAC,CAAD,CAAR,CAAYD,OAAZ,CAAoB,yBAApB,EAA+C,KAA/C,CAAhB;AACAH,QAAAA,GAAG,GAAGM,SAAS,GAAG,GAAZ,GAAkBF,QAAQ,CAAC,CAAD,CAAhC;AACD;AACF;;AACD,WAAOJ,GAAP;AACD;AACN,CAlBD;;AAmBA,IAAMO,QAAQ,GAAG,SAAXA,QAAW,CAAUC,GAAV,EAAe;AAC9B,SAAOC,IAAI,CAACD,GAAD,CAAX;AACD,CAFD;;AAGA,IAAME,WAAW,GAAG,SAAdA,WAAc,CAASC,GAAT,EAAaC,KAAb,EAAoB;AACtCD,EAAAA,GAAG,CAACE,IAAJ,CAAS,UAASC,CAAT,EAAWC,CAAX,EAAc;AACnB,QAAIC,CAAC,GAAIJ,KAAK,IAAIE,CAAC,CAACF,KAAD,CAAX,IAAuBE,CAA/B;AAAA,QACAG,CAAC,GAAIL,KAAK,IAAIG,CAAC,CAACH,KAAD,CAAX,IAAuBG,CAD3B;AAEA,WAAOE,CAAC,GAAGD,CAAX;AACH,GAJD;AAKA,SAAOL,GAAP;AACD,CAPD;;AASA,SACIjB,aADJ,EAEIG,SAFJ,EAGIU,QAHJ,EAIIG,WAJJ","sourcesContent":["const isNullOrEmpty = function(val) {\n    if (val == null || val == \"\" || typeof(val) == undefined) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconst numFormat = function (params) {\n    if (params === null || params === undefined) {\n        return null\n      } else if (isNaN(params)) {\n        return 'NaN'\n      } else {\n        let num = params.toString()\n        if (/^-?\\d+\\.?\\d+$/.test(num)) {\n          if (/^-?\\d+$/.test(num)) {\n            num = num.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')\n          } else {\n            let numarray = num.split('.')\n            let numbefore = numarray[0].replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')\n            num = numbefore + '.' + numarray[1]\n          }\n        }\n        return num\n      }\n}\nconst toBase64 = function (str) {\n  return btoa(str)\n}\nconst sortByValue = function(arr,value) {\n  arr.sort(function(x,y) {\n      let m = (value && x[value]) || x,\n      n = (value && y[value]) || y;\n      return n - m\n  })\n  return arr\n}\n \nexport {\n    isNullOrEmpty,\n    numFormat,\n    toBase64,\n    sortByValue\n}"]}]}